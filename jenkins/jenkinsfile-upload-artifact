pipeline {
  agent any
  tools {
    maven 'MAVEN3'
  }

  stages {
    stage ('fetch the code') {
      steps {
        git branch: 'vp-rem', url: 'https://github.com/devopshydclub/vprofile-repo.git'
      }
    }

    stage ('Checkstyle') {
      tools {
        jdk 'OracleJDK11'
      }

      steps {
        sh 'mvn checkstyle:checkstyle'
      }
    }

    stage ('UNITests') {
      tools {
        jdk 'OracleJDK11'
      }

      steps {
        sh 'mvn test'
      }
    }

    stage ('Build') {
      tools {
        jdk 'OracleJDK11'
      }

      steps {
        sh 'mvn install -DskipTest'
      }

      post {
        success {
          archiveArtifacts artifacts: 'target/*.war'
        }
      }
    }

    stage ('SonarQube scanning') {
      environment {
        sonar = tool 'Sonar_6.2'
      }

      steps {
        withSonarQubeEnv(installationName: 'Sonarqube_Server', credentialsId: "sonarqube_token") {
          sh '''${sonar}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
          -Dsonar.projectName=vprofile-repo \
          -Dsonar.projectVersion=1.$BUILD_ID \
          -Dsonar.sources=src/ \
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/ \
          -Dsonar.junit.reportsPath=target/surefire-reports/ \
          -Dsonar.jacoco.reportsPath=target/jacoco.exec \
          -Dsonar.java.libraries= \
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml '''
        }
      }
    }

    stage ('Quality Gate') {
      steps {
        timeout (1) {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage ('Upload artifact to Nexus server') {
      steps {
        script {
          def artifactDir = 'target'

          def artifacts = sh(script: "find ${artifactDir} -type f -maxdepth 1 \\( -name '*.war' -o -name '*.jar' \\)", returnStdout: true).trim().split('\n')

          def nexusArtifacts = []

          for (artifact in artifacts) {
            def artifactName = artifact.tokenize('/').last()
            nexusArtifacts.add([
              artifactId: artifactName.tokenize('.').first(),
              classifier: 'classifier',
              file: artifact,
              type: artifactName.tokenize('.').last()
            ])
          }

          nexusArtifactUploader(
            artifacts: nexusArtifacts,
            credentialsId: 'nexus_auth',
            groupId: 'group',
            nexusUrl: '192.168.56.21:8081',
            nexusVersion: 'nexus3',
            protocol: 'http',
            repository: 'vprofile-repo',
            version: "${env.BUILD_ID}"
          )
        }
      }
    }
  }
}