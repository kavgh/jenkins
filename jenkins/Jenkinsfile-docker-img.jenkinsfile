pipeline {
  agent any

  environment {
    registryCredential = "ecr:us-east-2:aws_jenkins"
    appRegistry = "905418464140.dkr.ecr.us-east-2.amazonaws.com/vprofileappimg"
    vprofileRegistry = "https://905418464140.dkr.ecr.us-east-2.amazonaws.com"
  }

  stages {
    stage('Fetch code') {
      steps {
        git branch: 'docker', url: 'https://github.com/devopshydclub/vprofile-project.git'
      }
    }

    stage('Test') { 
      steps {
        sh 'mvn test'
      }
    }

    stage('Code Analysis with Checkstyle') {
      steps {
        sh 'mvn checkstyle:checkstyle'
      }
      post {
        success {
          echo 'Generated Analysis Result'
        }
      }
    }

    stage('build && SonarQube analysis') {
      environment {
        sonar = tool 'Sonar_6.2'
      }
      steps {
        withSonarQubeEnv('Sonarqube_Server') {
          sh '''${sonar}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
            -Dsonar.projectName=vprofile-repo \
            -Dsonar.projectVersion=1.$BUILD_NUMBER \
            -Dsonar.sources=src \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(1) {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Build App Image') {
      steps {
        script {
          dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", './Docker-files/app/multistage/')
        }
      }
    }

    stage('Upload App Image') {
      steps {
        script {
          docker.withRegistry( vprofileRegistry, registryCredential) {
            dockerImage.push("$BUILD_NUMBER")
            dockerImage.push('latest')
          }
        }
      }
    }
  }
}